openapi: 3.0.1
info:
  title: common-platform-product-mgmt
  description: Product Management Core Application
  contact:
    name: Firefly Software Solutions Inc
    email: dev@getfirefly.io
  version: 1.0.0
servers:
  - url: http://core.getfirefly.io/products
    description: Development Environment
  - url: /
    description: Local Development Environment
tags:
  - name: Product Lifecycle
    description: APIs for managing lifecycle stages or events associated with a specific product
  - name: Product Limit
    description: APIs for managing limits (restrictions, thresholds, etc.) associated with a specific product
  - name: Product Feature
    description: APIs for managing features associated with a specific product
  - name: Product Documentation Requirements
    description: APIs for managing documentation requirements for products during the contracting/opening phase
  - name: Product Documentation
    description: APIs for managing documentation (manuals, guides, etc.) associated with a specific product
  - name: Product Relationship
    description: APIs for managing relationships between products
  - name: Product Pricing Localization
    description: APIs for managing localized pricing data under a specific product pricing record
  - name: Fee Application Rule
    description: APIs for managing fee application rules in a specific fee structure component
  - name: Product
    description: APIs for managing core product entities in the product management platform
  - name: Product Fee Component
    description: APIs for managing components under a specific fee structure
  - name: Product Version
    description: APIs for managing different versions of a product
  - name: Product Fee Structure
    description: APIs for managing fee structures associated with a specific product
  - name: Product Bundle
    description: APIs for managing product bundles in the product management platform
  - name: Product Category
    description: APIs for managing product categories in the product management platform
  - name: Product Wizard
    description: APIs for creating products through a step-by-step wizard process
  - name: Product Localization
    description: APIs for managing localized data (translations, region-specific info) for a product
  - name: Fee Structure
    description: APIs for managing fee structures in the product platform
  - name: Product Pricing
    description: APIs for managing pricing records associated with a specific product
paths:
  /api/v1/products/{productId}/versions/{versionId}:
    get:
      tags:
        - Product Version
      summary: Get Product Version by ID
      description: Retrieve a specific product version using its unique identifier, ensuring it belongs to the specified product.
      operationId: getProductVersion
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: versionId
          in: path
          description: Unique identifier of the product version
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the product version record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVersionDTO'
        '404':
          description: Product version not found
    put:
      tags:
        - Product Version
      summary: Update Product Version
      description: Update an existing version record associated with the specified product.
      operationId: updateProductVersion
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: versionId
          in: path
          description: Unique identifier of the product version record to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVersionDTO'
        required: true
      responses:
        '200':
          description: Product version updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVersionDTO'
        '404':
          description: Product version not found
    delete:
      tags:
        - Product Version
      summary: Delete Product Version
      description: Remove an existing product version record by its unique identifier.
      operationId: deleteProductVersion
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: versionId
          in: path
          description: Unique identifier of the product version to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product version deleted successfully
        '404':
          description: Product version not found
  /api/v1/products/{productId}/relationships/{relationshipId}:
    get:
      tags:
        - Product Relationship
      summary: Get Product Relationship by ID
      description: Retrieve a specific relationship record by its unique identifier, ensuring it matches the product.
      operationId: getRelationship
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: relationshipId
          in: path
          description: Unique identifier of the product relationship record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the product relationship record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRelationshipDTO'
        '404':
          description: Product relationship not found
    put:
      tags:
        - Product Relationship
      summary: Update Product Relationship
      description: Update an existing product relationship record associated with the specified product.
      operationId: updateRelationship
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: relationshipId
          in: path
          description: Unique identifier of the product relationship record to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRelationshipDTO'
        required: true
      responses:
        '200':
          description: Product relationship updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRelationshipDTO'
        '404':
          description: Product relationship not found
    delete:
      tags:
        - Product Relationship
      summary: Delete Product Relationship
      description: Remove an existing product relationship record by its unique identifier.
      operationId: deleteRelationship
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: relationshipId
          in: path
          description: Unique identifier of the product relationship record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product relationship deleted successfully
        '404':
          description: Product relationship not found
  /api/v1/products/{productId}/pricings/{pricingId}/localizations/{localizationId}:
    get:
      tags:
        - Product Pricing Localization
      summary: Get Localization by ID
      description: Retrieve a specific localization record by its unique identifier.
      operationId: getLocalization
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product (unused in the service, but kept for hierarchy)
          required: true
          schema:
            type: string
            format: uuid
        - name: pricingId
          in: path
          description: Unique identifier of the product pricing record
          required: true
          schema:
            type: string
            format: uuid
        - name: localizationId
          in: path
          description: Unique identifier of the localization record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the localization record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPricingLocalizationDTO'
        '404':
          description: Localization record not found
    put:
      tags:
        - Product Pricing Localization
      summary: Update Localization
      description: Update an existing localization record for a product pricing.
      operationId: updateLocalization
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product (unused in the service, but kept for hierarchy)
          required: true
          schema:
            type: string
            format: uuid
        - name: pricingId
          in: path
          description: Unique identifier of the product pricing record
          required: true
          schema:
            type: string
            format: uuid
        - name: localizationId
          in: path
          description: Unique identifier of the localization record to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPricingLocalizationDTO'
        required: true
      responses:
        '200':
          description: Localization record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPricingLocalizationDTO'
        '404':
          description: Localization record not found
    delete:
      tags:
        - Product Pricing Localization
      summary: Delete Localization
      description: Remove an existing localization record by its unique identifier.
      operationId: deleteLocalization
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product (unused in the service, but kept for hierarchy)
          required: true
          schema:
            type: string
            format: uuid
        - name: pricingId
          in: path
          description: Unique identifier of the product pricing record
          required: true
          schema:
            type: string
            format: uuid
        - name: localizationId
          in: path
          description: Unique identifier of the localization record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Localization record deleted successfully
        '404':
          description: Localization record not found
  /api/v1/products/{productId}/pricings/{pricingId}:
    get:
      tags:
        - Product Pricing
      summary: Get Product Pricing by ID
      description: Retrieve a specific product pricing record using its unique identifier, ensuring it matches the specified product.
      operationId: getPricing
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: pricingId
          in: path
          description: Unique identifier of the product pricing record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the product pricing record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPricingDTO'
        '404':
          description: Product pricing not found
    put:
      tags:
        - Product Pricing
      summary: Update Product Pricing
      description: Update an existing pricing record associated with the specified product.
      operationId: updatePricing
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: pricingId
          in: path
          description: Unique identifier of the product pricing record to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPricingDTO'
        required: true
      responses:
        '200':
          description: Product pricing updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPricingDTO'
        '404':
          description: Product pricing not found
    delete:
      tags:
        - Product Pricing
      summary: Delete Product Pricing
      description: Remove an existing pricing record from a product by its unique identifier.
      operationId: deletePricing
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: pricingId
          in: path
          description: Unique identifier of the product pricing record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product pricing deleted successfully
        '404':
          description: Product pricing not found
  /api/v1/products/{productId}/localizations/{localizationId}:
    get:
      tags:
        - Product Localization
      summary: Get Product Localization by ID
      description: Retrieve a specific localization record for the given product.
      operationId: getLocalizationById
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: localizationId
          in: path
          description: Unique identifier of the localization record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the product localization record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductLocalizationDTO'
        '404':
          description: Product localization not found
    put:
      tags:
        - Product Localization
      summary: Update Product Localization
      description: Update an existing product localization record.
      operationId: updateLocalization_1
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: localizationId
          in: path
          description: Unique identifier of the localization record to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductLocalizationDTO'
        required: true
      responses:
        '200':
          description: Product localization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductLocalizationDTO'
        '404':
          description: Product localization not found
    delete:
      tags:
        - Product Localization
      summary: Delete Product Localization
      description: Remove an existing localization record from the product.
      operationId: deleteLocalization_1
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: localizationId
          in: path
          description: Unique identifier of the localization record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product localization deleted successfully
        '404':
          description: Product localization not found
  /api/v1/products/{productId}/limits/{limitId}:
    get:
      tags:
        - Product Limit
      summary: Get Product Limit by ID
      description: Retrieve a specific product limit by its unique identifier.
      operationId: getProductLimit
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: limitId
          in: path
          description: Unique identifier of the product limit
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the product limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductLimitDTO'
        '404':
          description: Product limit not found
    put:
      tags:
        - Product Limit
      summary: Update Product Limit
      description: Update an existing product limit with new data.
      operationId: updateProductLimit
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: limitId
          in: path
          description: Unique identifier of the product limit to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductLimitDTO'
        required: true
      responses:
        '200':
          description: Product limit updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductLimitDTO'
        '404':
          description: Product limit not found
    delete:
      tags:
        - Product Limit
      summary: Delete Product Limit
      description: Remove an existing product limit by its unique identifier.
      operationId: deleteProductLimit
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: limitId
          in: path
          description: Unique identifier of the product limit to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product limit deleted successfully
        '404':
          description: Product limit not found
  /api/v1/products/{productId}/lifecycle/{lifecycleId}:
    get:
      tags:
        - Product Lifecycle
      summary: Get Product Lifecycle by ID
      description: Retrieve a specific lifecycle entry using its unique identifier, ensuring it belongs to the specified product.
      operationId: getProductLifecycle
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: lifecycleId
          in: path
          description: Unique identifier of the lifecycle entry
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the product lifecycle entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductLifecycleDTO'
        '404':
          description: Lifecycle entry not found
    put:
      tags:
        - Product Lifecycle
      summary: Update Product Lifecycle
      description: Update an existing lifecycle entry associated with the specified product.
      operationId: updateProductLifecycle
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: lifecycleId
          in: path
          description: Unique identifier of the lifecycle entry to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductLifecycleDTO'
        required: true
      responses:
        '200':
          description: Product lifecycle entry updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductLifecycleDTO'
        '404':
          description: Lifecycle entry not found
    delete:
      tags:
        - Product Lifecycle
      summary: Delete Product Lifecycle
      description: Remove an existing lifecycle entry from a product by its unique identifier.
      operationId: deleteProductLifecycle
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: lifecycleId
          in: path
          description: Unique identifier of the lifecycle entry to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Lifecycle entry deleted successfully
        '404':
          description: Lifecycle entry not found
  /api/v1/products/{productId}/fee-structures/{productFeeStructId}:
    get:
      tags:
        - Product Fee Structure
      summary: Get Fee Structure by ID
      description: Retrieve a specific fee structure by its unique identifier, confirming it belongs to the specified product.
      operationId: getFeeStructure
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: productFeeStructId
          in: path
          description: Unique identifier of the product fee structure
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the product fee structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFeeStructureDTO'
        '404':
          description: Fee structure not found
    put:
      tags:
        - Product Fee Structure
      summary: Update Fee Structure
      description: Update an existing fee structure for a specific product.
      operationId: updateFeeStructure
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: productFeeStructId
          in: path
          description: Unique identifier of the product fee structure to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFeeStructureDTO'
        required: true
      responses:
        '200':
          description: Fee structure updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFeeStructureDTO'
        '404':
          description: Fee structure not found
    delete:
      tags:
        - Product Fee Structure
      summary: Delete Fee Structure
      description: Remove an existing fee structure from a specific product.
      operationId: deleteFeeStructure
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: productFeeStructId
          in: path
          description: Unique identifier of the fee structure to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Fee structure deleted successfully
        '404':
          description: Fee structure not found
  /api/v1/products/{productId}/features/{featureId}:
    get:
      tags:
        - Product Feature
      summary: Get Product Feature by ID
      description: Retrieve a specific product feature using its unique identifier, ensuring it matches the product.
      operationId: getFeature
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: featureId
          in: path
          description: Unique identifier of the feature
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the product feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFeatureDTO'
        '404':
          description: Product feature not found
    put:
      tags:
        - Product Feature
      summary: Update Product Feature
      description: Update an existing feature associated with the specified product.
      operationId: updateFeature
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: featureId
          in: path
          description: Unique identifier of the product feature to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFeatureDTO'
        required: true
      responses:
        '200':
          description: Product feature updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFeatureDTO'
        '404':
          description: Product feature not found
    delete:
      tags:
        - Product Feature
      summary: Delete Product Feature
      description: Remove an existing feature from the specified product.
      operationId: deleteFeature
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: featureId
          in: path
          description: Unique identifier of the product feature to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product feature deleted successfully
        '404':
          description: Product feature not found
  /api/v1/products/{productId}/documentation/{docId}:
    get:
      tags:
        - Product Documentation
      summary: Get Product Documentation by ID
      description: Retrieve a specific documentation item by its unique identifier, ensuring it belongs to the specified product.
      operationId: getDocumentation
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: docId
          in: path
          description: Unique identifier of the documentation item
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the product documentation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDocumentationDTO'
        '404':
          description: Product documentation not found
    put:
      tags:
        - Product Documentation
      summary: Update Product Documentation
      description: Update an existing documentation item for a specific product.
      operationId: updateDocumentation
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: docId
          in: path
          description: Unique identifier of the documentation to be updated
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDocumentationDTO'
        required: true
      responses:
        '200':
          description: Product documentation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDocumentationDTO'
        '404':
          description: Product documentation not found
    delete:
      tags:
        - Product Documentation
      summary: Delete Product Documentation
      description: Remove an existing product documentation item by its unique identifier.
      operationId: deleteDocumentation
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: docId
          in: path
          description: Unique identifier of the documentation to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product documentation deleted successfully
        '404':
          description: Product documentation not found
  /api/v1/products/{productId}/documentation-requirements/{requirementId}:
    get:
      tags:
        - Product Documentation Requirements
      summary: Get Product Documentation Requirement by ID
      description: Retrieve a specific documentation requirement by its unique identifier, ensuring it belongs to the specified product.
      operationId: getDocumentationRequirement
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: requirementId
          in: path
          description: Unique identifier of the documentation requirement
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the product documentation requirement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDocumentationRequirementDTO'
        '404':
          description: Product documentation requirement not found
    put:
      tags:
        - Product Documentation Requirements
      summary: Update Product Documentation Requirement
      description: Update an existing documentation requirement for a specific product.
      operationId: updateDocumentationRequirement
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: requirementId
          in: path
          description: Unique identifier of the documentation requirement to be updated
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDocumentationRequirementDTO'
        required: true
      responses:
        '200':
          description: Product documentation requirement updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDocumentationRequirementDTO'
        '404':
          description: Product documentation requirement not found
    delete:
      tags:
        - Product Documentation Requirements
      summary: Delete Product Documentation Requirement
      description: Remove an existing product documentation requirement by its unique identifier.
      operationId: deleteDocumentationRequirement
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: requirementId
          in: path
          description: Unique identifier of the documentation requirement to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product documentation requirement deleted successfully
        '404':
          description: Product documentation requirement not found
  /api/v1/products/{productId}:
    get:
      tags:
        - Product
      summary: Get Product by ID
      description: Retrieve a specific product by its unique identifier.
      operationId: getProduct
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        '404':
          description: Product not found
    put:
      tags:
        - Product
      summary: Update Product
      description: Update the information of an existing product by its unique identifier.
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDTO'
        required: true
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        '404':
          description: Product not found
    delete:
      tags:
        - Product
      summary: Delete Product
      description: Remove an existing product by its unique identifier.
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
  /api/v1/fee-structures/{feeStructureId}/components/{componentId}/rules/{ruleId}:
    get:
      tags:
        - Fee Application Rule
      summary: Get Fee Application Rule by ID
      description: Retrieve a specific fee application rule using its unique identifier.
      operationId: getRule
      parameters:
        - name: feeStructureId
          in: path
          description: Unique identifier of the fee structure
          required: true
          schema:
            type: string
            format: uuid
        - name: componentId
          in: path
          description: Unique identifier of the fee component
          required: true
          schema:
            type: string
            format: uuid
        - name: ruleId
          in: path
          description: Unique identifier of the fee application rule
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the fee application rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeApplicationRuleDTO'
        '404':
          description: Fee application rule not found
    put:
      tags:
        - Fee Application Rule
      summary: Update Fee Application Rule
      description: Update an existing fee application rule by its unique identifier.
      operationId: updateRule
      parameters:
        - name: feeStructureId
          in: path
          description: Unique identifier of the fee structure
          required: true
          schema:
            type: string
            format: uuid
        - name: componentId
          in: path
          description: Unique identifier of the fee component
          required: true
          schema:
            type: string
            format: uuid
        - name: ruleId
          in: path
          description: Unique identifier of the fee application rule to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeeApplicationRuleDTO'
        required: true
      responses:
        '200':
          description: Fee application rule updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeApplicationRuleDTO'
        '404':
          description: Fee application rule not found
    delete:
      tags:
        - Fee Application Rule
      summary: Delete Fee Application Rule
      description: Remove an existing fee application rule by its unique identifier.
      operationId: deleteRule
      parameters:
        - name: feeStructureId
          in: path
          description: Unique identifier of the fee structure
          required: true
          schema:
            type: string
            format: uuid
        - name: componentId
          in: path
          description: Unique identifier of the fee component
          required: true
          schema:
            type: string
            format: uuid
        - name: ruleId
          in: path
          description: Unique identifier of the fee application rule to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Fee application rule deleted successfully
        '404':
          description: Fee application rule not found
  /api/v1/fee-structures/{feeStructureId}/components/{componentId}:
    get:
      tags:
        - Product Fee Component
      summary: Get Fee Component by ID
      description: Retrieve a specific fee component by its unique identifier.
      operationId: getFeeComponent
      parameters:
        - name: feeStructureId
          in: path
          description: Unique identifier of the fee structure
          required: true
          schema:
            type: string
            format: uuid
        - name: componentId
          in: path
          description: Unique identifier of the fee component
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the fee component
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeComponentDTO'
        '404':
          description: Fee component not found
    put:
      tags:
        - Product Fee Component
      summary: Update Fee Component
      description: Update an existing fee component by its unique identifier.
      operationId: updateFeeComponent
      parameters:
        - name: feeStructureId
          in: path
          description: Unique identifier of the fee structure
          required: true
          schema:
            type: string
            format: uuid
        - name: componentId
          in: path
          description: Unique identifier of the fee component to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeeComponentDTO'
        required: true
      responses:
        '200':
          description: Fee component updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeComponentDTO'
        '404':
          description: Fee component not found
    delete:
      tags:
        - Product Fee Component
      summary: Delete Fee Component
      description: Remove an existing fee component by its unique identifier.
      operationId: deleteFeeComponent
      parameters:
        - name: feeStructureId
          in: path
          description: Unique identifier of the fee structure
          required: true
          schema:
            type: string
            format: uuid
        - name: componentId
          in: path
          description: Unique identifier of the fee component to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Fee component deleted successfully
        '404':
          description: Fee component not found
  /api/v1/fee-structures/{feeStructureId}:
    get:
      tags:
        - Fee Structure
      summary: Get Fee Structure by ID
      description: Retrieve a specific fee structure by its unique identifier.
      operationId: getFeeStructure_1
      parameters:
        - name: feeStructureId
          in: path
          description: Unique identifier of the fee structure
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the fee structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeStructureDTO'
        '404':
          description: Fee structure not found
    put:
      tags:
        - Fee Structure
      summary: Update Fee Structure
      description: Update an existing fee structure by its unique identifier.
      operationId: updateFeeStructure_1
      parameters:
        - name: feeStructureId
          in: path
          description: Unique identifier of the fee structure to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeeStructureDTO'
        required: true
      responses:
        '200':
          description: Fee structure updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeStructureDTO'
        '404':
          description: Fee structure not found
    delete:
      tags:
        - Fee Structure
      summary: Delete Fee Structure
      description: Remove an existing fee structure by its unique identifier.
      operationId: deleteFeeStructure_1
      parameters:
        - name: feeStructureId
          in: path
          description: Unique identifier of the fee structure
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Fee structure deleted successfully
        '404':
          description: Fee structure not found
  /api/v1/categories/{categoryId}/subtypes/{subtypeId}:
    get:
      tags:
        - Product Category
      summary: Get Category Subtype by ID
      description: Retrieve a specific product subtype using its unique identifier.
      operationId: getSubtype
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the product category
          required: true
          schema:
            type: string
            format: uuid
        - name: subtypeId
          in: path
          description: Unique identifier of the product subtype
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the product subtype
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategorySubtypeDTO'
        '404':
          description: Product subtype not found
    put:
      tags:
        - Product Category
      summary: Update Category Subtype
      description: Update an existing product subtype by its unique identifier.
      operationId: updateSubtype
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the product category
          required: true
          schema:
            type: string
            format: uuid
        - name: subtypeId
          in: path
          description: Unique identifier of the product subtype
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategorySubtypeDTO'
        required: true
      responses:
        '200':
          description: Product subtype updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategorySubtypeDTO'
        '404':
          description: Product subtype not found
    delete:
      tags:
        - Product Category
      summary: Delete Category Subtype
      description: Remove an existing product subtype by its unique identifier.
      operationId: deleteSubtype
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the product category
          required: true
          schema:
            type: string
            format: uuid
        - name: subtypeId
          in: path
          description: Unique identifier of the product subtype
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product subtype deleted successfully
        '404':
          description: Product subtype not found
  /api/v1/categories/{categoryId}:
    get:
      tags:
        - Product Category
      summary: Get Product Category by ID
      description: Retrieve a specific product category by its unique identifier.
      operationId: getCategory
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the product category
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the product category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryDTO'
        '404':
          description: Product category not found
    put:
      tags:
        - Product Category
      summary: Update Product Category
      description: Update the information of an existing product category by its unique identifier.
      operationId: updateCategory
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the product category to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategoryDTO'
        required: true
      responses:
        '200':
          description: Product category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryDTO'
        '404':
          description: Product category not found
    delete:
      tags:
        - Product Category
      summary: Delete Product Category
      description: Remove an existing product category by its unique identifier.
      operationId: deleteCategory
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the product category to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product category deleted successfully
        '404':
          description: Product category not found
  /api/v1/bundles/{bundleId}/items/{itemId}:
    get:
      tags:
        - Product Bundle
      summary: Get Product Bundle Item by ID
      description: Retrieve a specific item within a product bundle using its unique item identifier.
      operationId: getProductBundleItemById
      parameters:
        - name: bundleId
          in: path
          description: Unique identifier of the product bundle
          required: true
          schema:
            type: string
            format: uuid
        - name: itemId
          in: path
          description: Unique identifier of the item within the product bundle
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the product bundle item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductBundleItemDTO'
        '404':
          description: Item not found in the specified product bundle
    put:
      tags:
        - Product Bundle
      summary: Update Product Bundle Item
      description: Update an existing item within a product bundle.
      operationId: updateProductBundleItem
      parameters:
        - name: bundleId
          in: path
          description: Unique identifier of the product bundle
          required: true
          schema:
            type: string
            format: uuid
        - name: itemId
          in: path
          description: Unique identifier of the item to be updated
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductBundleItemDTO'
        required: true
      responses:
        '200':
          description: Product bundle item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductBundleItemDTO'
        '404':
          description: Item not found in the specified product bundle
    delete:
      tags:
        - Product Bundle
      summary: Delete Product Bundle Item
      description: Remove an existing item from a product bundle.
      operationId: deleteProductBundleItem
      parameters:
        - name: bundleId
          in: path
          description: Unique identifier of the product bundle
          required: true
          schema:
            type: string
            format: uuid
        - name: itemId
          in: path
          description: Unique identifier of the item to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product bundle item deleted successfully
        '404':
          description: Item not found in the specified product bundle
  /api/v1/bundles/{bundleId}:
    get:
      tags:
        - Product Bundle
      summary: Get Product Bundle by ID
      description: Retrieve a specific product bundle using its unique identifier.
      operationId: getById
      parameters:
        - name: bundleId
          in: path
          description: The unique identifier of the product bundle
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the product bundle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductBundleDTO'
        '400':
          description: Invalid Bundle ID provided
        '404':
          description: Product bundle not found
    put:
      tags:
        - Product Bundle
      summary: Update Product Bundle
      description: Update the information of an existing product bundle by its unique identifier.
      operationId: update
      parameters:
        - name: bundleId
          in: path
          description: The unique identifier of the product bundle to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductBundleDTO'
        required: true
      responses:
        '200':
          description: Product bundle updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductBundleDTO'
        '400':
          description: Invalid input data or bundle ID provided
        '404':
          description: Product bundle not found
    delete:
      tags:
        - Product Bundle
      summary: Delete Product Bundle
      description: Delete an existing product bundle by its unique identifier.
      operationId: delete
      parameters:
        - name: bundleId
          in: path
          description: The unique identifier of the product bundle to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product bundle deleted successfully
        '404':
          description: Product bundle not found
  /api/v1/products/{productId}/versions:
    get:
      tags:
        - Product Version
      summary: List Product Versions
      description: Retrieve a paginated list of all versions associated with the specified product.
      operationId: getAllProductVersions
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved the product versions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No product versions found for the specified product
    post:
      tags:
        - Product Version
      summary: Create Product Version
      description: Create a new product version for a specific product.
      operationId: createProductVersion
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVersionDTO'
        required: true
      responses:
        '200':
          description: Product version created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVersionDTO'
        '400':
          description: Invalid product version data provided
  /api/v1/products/{productId}/relationships:
    get:
      tags:
        - Product Relationship
      summary: List Product Relationships
      description: Retrieve a paginated list of all product relationships associated with the specified product.
      operationId: getAllRelationships
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved the product relationships
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No relationships found for the specified product
    post:
      tags:
        - Product Relationship
      summary: Create Product Relationship
      description: Create a new relationship record for a specific product.
      operationId: createRelationship
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRelationshipDTO'
        required: true
      responses:
        '200':
          description: Product relationship created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRelationshipDTO'
        '400':
          description: Invalid product relationship data provided
  /api/v1/products/{productId}/pricings/{pricingId}/localizations:
    get:
      tags:
        - Product Pricing Localization
      summary: List Localizations for Product Pricing
      description: Retrieve a paginated list of all localization records associated with a specific product pricing.
      operationId: getAllLocalizations
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product (unused in the service, but kept for hierarchy)
          required: true
          schema:
            type: string
            format: uuid
        - name: pricingId
          in: path
          description: Unique identifier of the product pricing record
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved the localization records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No localization records found for the specified pricing
    post:
      tags:
        - Product Pricing Localization
      summary: Create Localization for Product Pricing
      description: Create a new localization record and associate it with the specified product pricing.
      operationId: createLocalization
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product (unused in the service, but kept for hierarchy)
          required: true
          schema:
            type: string
            format: uuid
        - name: pricingId
          in: path
          description: Unique identifier of the product pricing record
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPricingLocalizationDTO'
        required: true
      responses:
        '200':
          description: Localization record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPricingLocalizationDTO'
        '400':
          description: Invalid localization data provided
  /api/v1/products/{productId}/pricings:
    get:
      tags:
        - Product Pricing
      summary: List Product Pricings
      description: Retrieve a paginated list of all pricing records associated with the specified product.
      operationId: getAllPricings
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved the product pricings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No pricing records found for the specified product
    post:
      tags:
        - Product Pricing
      summary: Create Product Pricing
      description: Create a new pricing record and associate it with a product.
      operationId: createPricing
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPricingDTO'
        required: true
      responses:
        '200':
          description: Product pricing created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPricingDTO'
        '400':
          description: Invalid product pricing data provided
  /api/v1/products/{productId}/localizations:
    get:
      tags:
        - Product Localization
      summary: List Product Localizations
      description: Retrieve a paginated list of all localizations associated with the specified product.
      operationId: getAllLocalizations_1
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved the list of product localizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No localizations found for the specified product
    post:
      tags:
        - Product Localization
      summary: Create Product Localization
      description: Create a new localization record associated with a specific product.
      operationId: createLocalization_1
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductLocalizationDTO'
        required: true
      responses:
        '200':
          description: Product localization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductLocalizationDTO'
        '400':
          description: Invalid product localization data provided
  /api/v1/products/{productId}/limits:
    get:
      tags:
        - Product Limit
      summary: List Product Limits
      description: Retrieve a paginated list of all limits associated with the specified product.
      operationId: getAllProductLimits
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved the product limits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No limits found for the specified product
    post:
      tags:
        - Product Limit
      summary: Create Product Limit
      description: Create a new limit and associate it with a product.
      operationId: createProductLimit
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductLimitDTO'
        required: true
      responses:
        '200':
          description: Product limit created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductLimitDTO'
        '400':
          description: Invalid product limit data provided
  /api/v1/products/{productId}/lifecycle:
    get:
      tags:
        - Product Lifecycle
      summary: List Product Lifecycles
      description: Retrieve a paginated list of all lifecycle entries associated with a given product.
      operationId: getProductLifecycles
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved lifecycles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No lifecycle entries found for the specified product
    post:
      tags:
        - Product Lifecycle
      summary: Create Product Lifecycle
      description: Create a new lifecycle entry for a specific product.
      operationId: createProductLifecycle
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductLifecycleDTO'
        required: true
      responses:
        '200':
          description: Product lifecycle created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductLifecycleDTO'
        '400':
          description: Invalid lifecycle data provided
  /api/v1/products/{productId}/fee-structures:
    get:
      tags:
        - Product Fee Structure
      summary: List Fee Structures by Product
      description: Retrieve a paginated list of fee structures associated with a given product.
      operationId: getAllFeeStructures
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved fee structures
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No fee structures found for the specified product
    post:
      tags:
        - Product Fee Structure
      summary: Create Fee Structure
      description: Create a new fee structure and associate it with a specific product.
      operationId: createFeeStructure
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFeeStructureDTO'
        required: true
      responses:
        '200':
          description: Product fee structure created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFeeStructureDTO'
        '400':
          description: Invalid fee structure data provided
  /api/v1/products/{productId}/features:
    get:
      tags:
        - Product Feature
      summary: List Product Features
      description: Retrieve a paginated list of all features associated with the specified product.
      operationId: getAllFeatures
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved the list of product features
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No features found for the specified product
    post:
      tags:
        - Product Feature
      summary: Create Product Feature
      description: Create a new feature linked to the specified product.
      operationId: createFeature
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFeatureDTO'
        required: true
      responses:
        '200':
          description: Product feature created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFeatureDTO'
        '400':
          description: Invalid feature data provided
  /api/v1/products/{productId}/documentation-requirements:
    get:
      tags:
        - Product Documentation Requirements
      summary: List Product Documentation Requirements
      description: Retrieve a paginated list of all documentation requirements for a given product.
      operationId: getAllDocumentationRequirements
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved product documentation requirements list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No documentation requirements found for the specified product
    post:
      tags:
        - Product Documentation Requirements
      summary: Create Product Documentation Requirement
      description: Create a new documentation requirement for a specific product.
      operationId: createDocumentationRequirement
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product to associate this documentation requirement with
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDocumentationRequirementDTO'
        required: true
      responses:
        '200':
          description: Product documentation requirement created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDocumentationRequirementDTO'
        '400':
          description: Invalid product documentation requirement data provided
  /api/v1/products/{productId}/documentation:
    get:
      tags:
        - Product Documentation
      summary: List Product Documentation
      description: Retrieve a paginated list of all documentation items linked to a given product.
      operationId: getAllDocumentation
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved product documentation list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No documentation found for the specified product
    post:
      tags:
        - Product Documentation
      summary: Create Product Documentation
      description: Create a new documentation item for a specific product.
      operationId: createDocumentation
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product to associate this documentation with
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDocumentationDTO'
        required: true
      responses:
        '200':
          description: Product documentation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDocumentationDTO'
        '400':
          description: Invalid product documentation data provided
  /api/v1/products:
    get:
      tags:
        - Product
      summary: List Products
      description: Retrieve a paginated list of products.
      operationId: getAllProducts
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved the list of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponseProductDTO'
        '404':
          description: No products found
    post:
      tags:
        - Product
      summary: Create Product
      description: Create a new product with its associated details.
      operationId: createProduct
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDTO'
        required: true
      responses:
        '200':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        '400':
          description: Invalid product data provided
  /api/v1/product-wizard/save:
    post:
      tags:
        - Product Wizard
      summary: Save Wizard State
      description: Save the current state of the wizard to resume later.
      operationId: saveWizardState
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductWizardDTO'
        required: true
      responses:
        '200':
          description: Wizard state saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWizardDTO'
  /api/v1/product-wizard/process-step:
    post:
      tags:
        - Product Wizard
      summary: Process Wizard Step
      description: Process the current step of the wizard and advance to the next step.
      operationId: processStep
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductWizardDTO'
        required: true
      responses:
        '200':
          description: Step processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWizardDTO'
        '400':
          description: Invalid step data or wizard state
  /api/v1/product-wizard/initialize:
    post:
      tags:
        - Product Wizard
      summary: Initialize Wizard
      description: Start a new product creation wizard with default settings.
      operationId: initializeWizard
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Wizard initialized successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWizardDTO'
  /api/v1/product-wizard/initialize/{templateName}:
    post:
      tags:
        - Product Wizard
      summary: Initialize Wizard with Template
      description: Start a new product creation wizard using a predefined template.
      operationId: initializeWizardWithTemplate
      parameters:
        - name: templateName
          in: path
          description: Name of the template to use
          required: true
          schema:
            type: string
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Wizard initialized with template successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWizardDTO'
        '400':
          description: Template not found
  /api/v1/product-wizard/complete:
    post:
      tags:
        - Product Wizard
      summary: Complete Wizard
      description: Complete the wizard process and create the product with all its related entities.
      operationId: completeWizard
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductWizardDTO'
        required: true
      responses:
        '200':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        '400':
          description: Wizard not completed or invalid data
  /api/v1/fee-structures/{feeStructureId}/components/{componentId}/rules:
    get:
      tags:
        - Fee Application Rule
      summary: List Fee Application Rules
      description: Retrieve a paginated list of fee application rules associated with a specific fee component.
      operationId: getRulesByComponentId
      parameters:
        - name: feeStructureId
          in: path
          description: Unique identifier of the fee structure
          required: true
          schema:
            type: string
            format: uuid
        - name: componentId
          in: path
          description: Unique identifier of the fee component
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved the list of fee application rules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No rules found for the specified component
    post:
      tags:
        - Fee Application Rule
      summary: Create Fee Application Rule
      description: Create a new fee application rule for the specified fee structure component.
      operationId: createRule
      parameters:
        - name: feeStructureId
          in: path
          description: Unique identifier of the fee structure
          required: true
          schema:
            type: string
            format: uuid
        - name: componentId
          in: path
          description: Unique identifier of the fee component
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeeApplicationRuleDTO'
        required: true
      responses:
        '200':
          description: Fee application rule created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeApplicationRuleDTO'
  /api/v1/fee-structures/{feeStructureId}/components:
    get:
      tags:
        - Product Fee Component
      summary: List Fee Components by Fee Structure
      description: Retrieve a paginated list of fee components associated with a specific fee structure.
      operationId: getByFeeStructureId
      parameters:
        - name: feeStructureId
          in: path
          description: Unique identifier of the fee structure
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved fee components
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No fee components found for the specified structure
    post:
      tags:
        - Product Fee Component
      summary: Create Fee Component
      description: Create a new fee component, which can be attached to a fee structure.
      operationId: createFeeComponent
      parameters:
        - name: feeStructureId
          in: path
          description: Unique identifier of the fee structure
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeeComponentDTO'
        required: true
      responses:
        '200':
          description: Fee component created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeComponentDTO'
  /api/v1/fee-structures:
    post:
      tags:
        - Fee Structure
      summary: Create Fee Structure
      description: Create a new fee structure to define fees within the system.
      operationId: createFeeStructure_1
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeeStructureDTO'
        required: true
      responses:
        '200':
          description: Fee structure created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeStructureDTO'
  /api/v1/categories/{categoryId}/subtypes:
    get:
      tags:
        - Product Category
      summary: List Category Subtypes
      description: Retrieve a paginated list of product subtypes belonging to a specific category.
      operationId: getAllSubtypes
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the product category
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved product subtypes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No subtypes found for the specified category
    post:
      tags:
        - Product Category
      summary: Create Category Subtype
      description: Create a new product subtype under a specific product category.
      operationId: createSubtype
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of the product category
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategorySubtypeDTO'
        required: true
      responses:
        '201':
          description: Product subtype created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategorySubtypeDTO'
  /api/v1/categories:
    post:
      tags:
        - Product Category
      summary: Create Product Category
      description: Create a new product category with its associated attributes.
      operationId: createCategory
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategoryDTO'
        required: true
      responses:
        '201':
          description: Product category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryDTO'
  /api/v1/bundles/{bundleId}/items:
    post:
      tags:
        - Product Bundle
      summary: Create Product Bundle Item
      description: Add a new item to an existing product bundle.
      operationId: createProductBundleItem
      parameters:
        - name: bundleId
          in: path
          description: Unique identifier of the product bundle to add an item to
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductBundleItemDTO'
        required: true
      responses:
        '200':
          description: Product bundle item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductBundleItemDTO'
  /api/v1/bundles:
    get:
      tags:
        - Product Bundle
      summary: List Product Bundles
      description: Retrieve a paginated list of all product bundles.
      operationId: getAll
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved the list of product bundles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '400':
          description: Invalid pagination parameters
    post:
      tags:
        - Product Bundle
      summary: Create Product Bundle
      description: Create a new product bundle containing multiple products or offerings.
      operationId: create
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductBundleDTO'
        required: true
      responses:
        '200':
          description: Product bundle created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductBundleDTO'
        '400':
          description: Invalid input data provided
  /api/v1/products/{productId}/documentation-requirements/mandatory:
    get:
      tags:
        - Product Documentation Requirements
      summary: Get Mandatory Product Documentation Requirements
      description: Retrieve all mandatory documentation requirements for a specific product.
      operationId: getMandatoryDocumentationRequirements
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the mandatory product documentation requirements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDocumentationRequirementDTO'
        '404':
          description: No mandatory documentation requirements found for the specified product
  /api/v1/products/{productId}/documentation-requirements/by-type/{docType}:
    get:
      tags:
        - Product Documentation Requirements
      summary: Get Product Documentation Requirement by Type
      description: Retrieve a specific documentation requirement by its document type, ensuring it belongs to the specified product.
      operationId: getDocumentationRequirementByType
      parameters:
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
            format: uuid
        - name: docType
          in: path
          description: Type of document
          required: true
          schema:
            type: string
            enum:
              - IDENTIFICATION
              - TAX_IDENTIFICATION
              - PROOF_OF_ADDRESS
              - INCOME_VERIFICATION
              - BANK_STATEMENTS
              - POWER_OF_ATTORNEY
              - BUSINESS_REGISTRATION
              - ARTICLES_OF_INCORPORATION
              - COMPANY_BYLAWS
              - SIGNED_CONTRACT
              - REGULATORY_COMPLIANCE
              - CREDIT_REPORT
              - INSURANCE_POLICY
              - OTHER
      responses:
        '200':
          description: Successfully retrieved the product documentation requirement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDocumentationRequirementDTO'
        '404':
          description: Product documentation requirement not found for the specified type
  /api/v1/product-wizard/{wizardId}:
    get:
      tags:
        - Product Wizard
      summary: Get Wizard by ID
      description: Retrieve a wizard session by its ID to continue a previously started wizard.
      operationId: getWizardById
      parameters:
        - name: wizardId
          in: path
          description: ID of the wizard to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Wizard retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWizardDTO'
        '404':
          description: Wizard not found
components:
  schemas:
    ProductVersionDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        productVersionId:
          type: string
          format: uuid
          readOnly: true
        productId:
          type: string
          format: uuid
        versionNumber:
          type: string
          format: uuid
        versionDescription:
          type: string
        effectiveDate:
          type: string
          format: date-time
    ProductRelationshipDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        productRelationshipId:
          type: string
          format: uuid
          readOnly: true
        productId:
          type: string
          format: uuid
        relatedProductId:
          type: string
          format: uuid
        relationshipType:
          type: string
          enum:
            - PRE_REQUISITE
            - COMPLIMENTARY
            - UPGRADE
            - CROSS_SELL
        description:
          type: string
    ProductPricingLocalizationDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        productPricingLocalizationId:
          type: string
          format: uuid
          readOnly: true
        productPricingId:
          type: string
          format: uuid
        currencyCode:
          type: string
        localizedAmountValue:
          type: number
    ProductPricingDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        productPricingId:
          type: string
          format: uuid
          readOnly: true
        productId:
          type: string
          format: uuid
        pricingType:
          type: string
          enum:
            - INTEREST_RATE
            - FEE
            - COVERAGE
            - SUBSCRIPTION
        amountValue:
          type: number
        amountUnit:
          type: string
        pricingCondition:
          type: string
        effectiveDate:
          type: string
          format: date
        expiryDate:
          type: string
          format: date
    ProductLocalizationDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        productLocalizationId:
          type: string
          format: uuid
          readOnly: true
        productId:
          type: string
          format: uuid
        languageCode:
          type: string
        localizedName:
          type: string
        localizedDescription:
          type: string
    ProductLimitDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        productLimitId:
          type: string
          format: uuid
          readOnly: true
        productId:
          type: string
          format: uuid
        limitType:
          type: string
          enum:
            - CREDIT_LIMIT
            - WITHDRAWAL_LIMIT
            - SUBSCRIPTION_LIMIT
        limitValue:
          type: number
        limitUnit:
          type: string
        timePeriod:
          type: string
          enum:
            - DAILY
            - MONTHLY
            - PER_TRANSACTION
            - NONE
        effectiveDate:
          type: string
          format: date
        expiryDate:
          type: string
          format: date
    ProductLifecycleDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        productLifecycleId:
          type: string
          format: uuid
          readOnly: true
        productId:
          type: string
          format: uuid
        lifecycleStatus:
          type: string
          enum:
            - PROPOSED
            - ACTIVE
            - SUSPENDED
            - RETIRED
        statusStartDate:
          type: string
          format: date-time
        statusEndDate:
          type: string
          format: date-time
        reason:
          type: string
    ProductFeeStructureDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        productFeeStructureId:
          type: string
          format: uuid
          readOnly: true
        productId:
          type: string
          format: uuid
        feeStructureId:
          type: string
          format: uuid
        priority:
          type: integer
          format: int32
    ProductFeatureDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        productFeatureId:
          type: string
          format: uuid
          readOnly: true
        productId:
          type: string
          format: uuid
        featureName:
          type: string
        featureDescription:
          type: string
        featureType:
          type: string
          enum:
            - STANDARD
            - OPTIONAL
            - PREMIUM
        isMandatory:
          type: boolean
    ProductDocumentationDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        productDocumentationId:
          type: string
          format: uuid
          readOnly: true
        productId:
          type: string
          format: uuid
        docType:
          type: string
          enum:
            - TNC
            - BROCHURE
            - POLICY_DOC
        documentManagerRef:
          type: integer
          format: int64
        dateAdded:
          type: string
          format: date-time
    ProductDocumentationRequirementDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        productDocRequirementId:
          type: string
          format: uuid
          readOnly: true
        productId:
          type: string
          format: uuid
        docType:
          type: string
          enum:
            - IDENTIFICATION
            - TAX_IDENTIFICATION
            - PROOF_OF_ADDRESS
            - INCOME_VERIFICATION
            - BANK_STATEMENTS
            - POWER_OF_ATTORNEY
            - BUSINESS_REGISTRATION
            - ARTICLES_OF_INCORPORATION
            - COMPANY_BYLAWS
            - SIGNED_CONTRACT
            - REGULATORY_COMPLIANCE
            - CREDIT_REPORT
            - INSURANCE_POLICY
            - OTHER
        isMandatory:
          type: boolean
        description:
          type: string
    ProductDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        productId:
          type: string
          format: uuid
          readOnly: true
        productSubtypeId:
          type: string
          format: uuid
        productType:
          type: string
          enum:
            - FINANCIAL
            - NON_FINANCIAL
        productName:
          type: string
        productCode:
          type: string
        productDescription:
          type: string
        productStatus:
          type: string
          enum:
            - PROPOSED
            - ACTIVE
            - RETIRED
            - DRAFT
        launchDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
    FeeApplicationRuleDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        feeApplicationRuleId:
          type: string
          format: uuid
          readOnly: true
        feeComponentId:
          type: string
          format: uuid
        ruleDescription:
          type: string
        ruleConditions:
          type: string
        effectiveDate:
          type: string
          format: date
        expiryDate:
          type: string
          format: date
    FeeComponentDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        feeComponentId:
          type: string
          format: uuid
          readOnly: true
        feeStructureId:
          type: string
          format: uuid
        feeType:
          type: string
          enum:
            - ORIGINATION_FEE
            - LATE_PAYMENT_FEE
            - TRANSACTION_FEE
            - SERVICE_FEE
        feeDescription:
          type: string
        feeAmount:
          type: number
        feeUnit:
          type: string
          enum:
            - FIXED
            - PERCENTAGE
        applicableConditions:
          type: string
    FeeStructureDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        feeStructureId:
          type: string
          format: uuid
          readOnly: true
        feeStructureName:
          type: string
        feeStructureDescription:
          type: string
        feeStructureType:
          type: string
          enum:
            - VERTICAL
            - HORIZONTAL
    ProductCategorySubtypeDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        productSubtypeId:
          type: string
          format: uuid
          readOnly: true
        productCategoryId:
          type: string
          format: uuid
        subtypeName:
          type: string
        subtypeDescription:
          type: string
    ProductCategoryDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        productCategoryId:
          type: string
          format: uuid
          readOnly: true
        categoryName:
          type: string
        categoryDescription:
          type: string
        parentCategoryId:
          type: string
          format: uuid
    ProductBundleItemDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        productBundleItemId:
          type: string
          format: uuid
          readOnly: true
        productBundleId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        specialConditions:
          type: string
    ProductBundleDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        productBundleId:
          type: string
          format: uuid
          readOnly: true
        bundleName:
          type: string
        bundleDescription:
          type: string
        bundleStatus:
          type: string
          enum:
            - ACTIVE
            - RETIRED
            - PROMO
    ProductWizardDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        id:
          type: string
          format: uuid
        product:
          $ref: '#/components/schemas/ProductDTO'
        features:
          type: array
          items:
            $ref: '#/components/schemas/ProductFeatureDTO'
        feeStructures:
          type: array
          items:
            $ref: '#/components/schemas/ProductFeeStructureDTO'
        pricing:
          type: array
          items:
            $ref: '#/components/schemas/ProductPricingDTO'
        lifecycle:
          type: array
          items:
            $ref: '#/components/schemas/ProductLifecycleDTO'
        localizations:
          type: array
          items:
            $ref: '#/components/schemas/ProductLocalizationDTO'
        documentationRequirements:
          type: array
          items:
            $ref: '#/components/schemas/ProductDocumentationRequirementDTO'
        wizardTemplate:
          type: string
        currentStep:
          type: integer
          format: int32
        totalSteps:
          type: integer
          format: int32
        progressPercentage:
          type: number
          format: double
        completed:
          type: boolean
        validationErrors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        isCurrentStepValid:
          type: boolean
        previewProduct:
          $ref: '#/components/schemas/ProductDTO'
        previewMode:
          type: boolean
        templateMetadata:
          type: object
          additionalProperties:
            type: object
        bulkProducts:
          type: array
          items:
            $ref: '#/components/schemas/ProductDTO'
        bulkMode:
          type: boolean
        lastUpdated:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
    PaginationResponse:
      type: object
      properties:
        content:
          type: array
          description: The list of items for the current page.
          items:
            type: object
            description: The list of items for the current page.
        totalElements:
          type: integer
          description: The total number of elements across all pages.
          format: int64
        totalPages:
          type: integer
          description: The total number of pages based on the data size and page size.
          format: int32
        currentPage:
          type: integer
          description: The current page number, typically zero-based.
          format: int32
      description: Represents a paginated response containing a list of items and pagination metadata.
    PaginationResponseProductDTO:
      type: object
      properties:
        content:
          type: array
          description: The list of items for the current page.
          items:
            $ref: '#/components/schemas/ProductDTO'
        totalElements:
          type: integer
          description: The total number of elements across all pages.
          format: int64
        totalPages:
          type: integer
          description: The total number of pages based on the data size and page size.
          format: int32
        currentPage:
          type: integer
          description: The current page number, typically zero-based.
          format: int32
      description: Represents a paginated response containing a list of items and pagination metadata.